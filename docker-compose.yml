version: '3.8'

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: budget_tracker_db
    environment:
      POSTGRES_DB: budget_tracker
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - budget_tracker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: budget_tracker_redis
    ports:
      - "6379:6379"
    networks:
      - budget_tracker_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: budget_tracker_api
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: http://+:5000
      ConnectionStrings__DefaultConnection: Host=postgres;Database=budget_tracker;Username=postgres;Password=postgres
      ConnectionStrings__Redis: redis:6379
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - budget_tracker_network
    volumes:
      - ./api/logs:/app/logs

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    container_name: budget_tracker_worker
    environment:
      DOTNET_ENVIRONMENT: Development
      ConnectionStrings__DefaultConnection: Host=postgres;Database=budget_tracker;Username=postgres;Password=postgres
      ConnectionStrings__Redis: redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - budget_tracker_network
    volumes:
      - ./worker/logs:/app/logs

  frontend:
    build:
      context: .
      dockerfile: app/Dockerfile
    container_name: budget_tracker_frontend
    environment:
      NODE_ENV: production
      NUXT_PUBLIC_API_BASE_URL: http://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - budget_tracker_network

networks:
  budget_tracker_network:
    driver: bridge

volumes:
  postgres_data: